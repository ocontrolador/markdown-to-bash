<?php

namespace Diaslasd;

use PHPUnit\Framework\TestCase;

class MarkdownToBashTest extends TestCase
{
    private MarkdownToBash $markdownToBash;

    protected function setUp(): void
    {
        $this->markdownToBash = new MarkdownToBash();
    }

    public function testFormatMarkdownString(): void
    {
        $markdown = "# TÃ­tulo 1\n\n## TÃ­tulo 2\n\n- Item 1\n- Item 2\n\n**Negrito**\n\n*ItÃ¡lico*\n\n[Link](https://www.example.com)\n\n| Coluna 1 | Coluna 2 |\n|---|---|";
        $expected = 'Â» [46m[1mTÃ­tulo 1[0m

Â»Â» [46m[1mTÃ­tulo 2[0m
[33m
- Item 1[0m
[33m- Item 2[0m

[1mNegrito[0m

[4mItÃ¡lico[0m

[4mLink[0m ([34mhttps://www.example.com[0m)

[36mColuna 1       [0m[36mColuna 2       [0m
[36m---            [0m[36m---            [0m'; 
        $this->assertEquals($expected, $this->markdownToBash->convert($markdown));
    }

    public function testConvertWithCodeBlock(): void
    {
        $markdown = "# TÃ­tulo\n\n
php\n<?php\necho 'OlÃ¡, mundo!';\n
ðŸ‘¾ ";
      $expected = "Â» [46m[1mTÃ­tulo[0m

php
<?php
echo 'OlÃ¡, mundo!';

ðŸ‘¾ "; 
        $this->assertEquals($expected, $this->markdownToBash->convert($markdown));
    }

    public function testConvertWithoutCodeBlock(): void
    {
        $markdown = "# TÃ­tulo\n\n- Item 1\n- Item 2";
        $expected = 'Â» [46m[1mTÃ­tulo[0m
[33m
- Item 1[0m
[33m- Item 2[0m';
        $this->assertEquals($expected, $this->markdownToBash->convert($markdown));
    }
}

